#!/bin/sh
## smartd warning script
#
# A notification wrapper for smartd on Turris OS
#
# Author:           Vojtech Myslivec <vojtech@xmyslivec.cz>
# License:          GPL v3 (GNU GPL from Free Software Foundation)
# Acknoledgement:   Inspired by script from Debian package

set -e

SCRIPTNAME="${0##*/}"
USAGE="DESCRIPTION
    smartd warning message script for TurrisOS
USAGE
    export SMARTD_MAILER='Path to external script, empty if to use sendmail'
    export SMARTD_ADDRESS='Space separated mail adresses, empty if none (not actualy used)'
    export SMARTD_MESSAGE='Error Message'
    export SMARTD_FAILTYPE='Type of failure, \"EMailTest\" for tests'
    $0 [--dryrun]"

# USAGE ----------------------------------------------------
# Parse options
dryrun='false'
[ "$1" == '--dryrun' ] && {
    dryrun='true'
    shift
}

[ $# == 0 ] || {
    echo "$USAGE" >&2
    exit 1
}

[ -n "$SMARTD_ADDRESS" -o -n "$SMARTD_MAILER" ] || {
    echo "$SCRIPTNAME: SMARTD_ADDRESS or SMARTD_MAILER must be set" >&2
    exit 1
}

# PARAMETERS -----------------------------------------------
# Set hostname if empty
[ -z "$HOSTNAME" ] && {
    HOSTNAME=$(/sbin/sysctl -n kernel.hostname)
}

# split HOSTNAME to short name and domain
hostname="${HOSTNAME%%.*}"
dnsdomain="${HOSTNAME#*.}"

[ "$dnsdomain" == "$hostname" ] && {
    dnsdomain='[Empty]'
}

hostname=${hostname:-[Unknown]}
SMARTD_FAILTYPE=${SMARTD_FAILTYPE:-[SMARTD_FAILTYPE]}
SMARTD_MESSAGE=${SMARTD_MESSAGE:-[SMARTD_MESSAGE]}
SMARTD_DEVICEINFO=${SMARTD_DEVICEINFO:-[SMARTD_DEVICEINFO]}

# Format subject
export SMARTD_SUBJECT="SMART error (${SMARTD_FAILTYPE}) detected on host: $hostname"

# Format fullmessage
export SMARTD_FULLMESSAGE="This message was generated by the smartd daemon running on:

   Hostname:   ${hostname}
   DNS domain: ${dnsdomain}

The following warning/error was logged by the smartd daemon:

${SMARTD_MESSAGE}

Device info:
${SMARTD_DEVICEINFO}

For details see host's SYSLOG.
"

if [ -n "$SMARTD_MAILER" ]; then
    # Run external command
    if [ "$dryrun" == 'true' ]; then
        echo "export SMARTD_SUBJECT='$SMARTD_SUBJECT'"
        echo "export SMARTD_FULLMESSAGE='$SMARTD_FULLMESSAGE'"
        echo "'$SMARTD_MAILER' < /dev/null"
    else
        unset SMARTD_ADDRESS
        "$SMARTD_MAILER" < /dev/null
    fi

else
    # Use default Turris notification
    if [ "$dryrun" == 'true' ]; then
        echo "create_notification -s error '$SMARTD_FULLMESSAGE'"
    else
        create_notification -s error "$SMARTD_FULLMESSAGE"
    fi

fi
